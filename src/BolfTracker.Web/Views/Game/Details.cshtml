@model BolfTracker.Web.GamePanelViewModel
@{
    ViewBag.Title = "Game Panel - Bolf Tracker";
}
<h2>
    Game Panel - @String.Format("{0:d}", Model.Game.Date)</h2>
@if (HttpContext.Current.User.Identity.IsAuthenticated)
{
    if (!Model.GameFinalized)
    {
        using (Html.BeginForm("Finalize", "Game", FormMethod.Post))
        {
    @Html.Hidden("gameId", Model.Game.Id)
    <input type="submit" class="btn" value="Finalize Game" />
        }
    }
}
<div class="row">
    <div class="span8">
        @if (HttpContext.Current.User.Identity.IsAuthenticated)
        {
            if (!Model.GameFinalized)
            {
            <h3>
                Enter Shot</h3>
                using (Html.BeginForm("Create", "Score", FormMethod.Post, new { @class = "form-stacked" }))
                {
            @Html.HiddenFor(m => m.Game.Id)
            <label for="player">
                Player:
            </label>@Html.DropDownListFor(m => m.Player, Model.AllPlayers)
            <label for="hole">
                Hole:
            </label>@Html.DropDownListFor(m => m.Hole, Model.AllHoles, new { @id = "currentHole" })
            <label for="attempts">
                Attempts:
            </label>
            <input type="text" name="attempts" id="attempts" />
            <label for="shotMade">
                Shot Made:
            </label>
            <input type="checkbox" name="shotMade" id="shotMade" />
            <div class="actions">
                <input type="submit" class="btn primary" value="Save Shot" />
            </div>
                }
            }
        }
    </div>
    <div class="span8">
        <h3>
            Leaderboard</h3>
        @if (Model.Game.Shots.Any())
        {
            <table id="leaderboard" class="zebra-striped">
                <tr>
                    <th title="Player" style="width: 150px; text-align: left;">
                        Player
                    </th>
                    <th title="Points" style="width: 70px; text-align: left;">
                        Points
                    </th>
                    <th title="Shooting Percentage" style="width: 95px; text-align: left;">
                        Shooting
                    </th>
                    <th title="Steals" style="width: 70px; text-align: left;">
                        Steals
                    </th>
                    <th title="Pushes" style="width: 70px; text-align: left;">
                        Pushes
                    </th>
                </tr>
                @foreach (var player in Model.Leaderboard)
                {
                    <tr>
                        <td>@player.Player.Name
                        </td>
                        <td>@player.Points
                        </td>
                        <td>@player.ShotsMade/@player.Attempts (@player.ShootingPercentage.ToString("P0"))
                        </td>
                        <td>@player.Steals
                        </td>
                        <td>@player.Pushes
                        </td>
                    </tr>
                }
            </table>
        }
        else
        {
            <p>
                Game has not started.</p> 
        }
        @if (!Model.GameFinalized)
        { 
            <p>
                <span>Points Available: @Model.PointsAvailable</span>
            </p>
        }
    </div>
</div>
<h3>
    Hole History</h3>
@if (Model.Game.Shots.Any())
{
    int lastShot = Model.Game.Shots.Max(s => s.Id);
        
    <table class="zebra-striped">
        <tr>
            <th title="Hole" style="width: 50px; text-align: left;">
                Hole
            </th>
            <th title="Player" style="width: 150px; text-align: left;">
                Player
            </th>
            <th title="Attempts" style="width: 85px; text-align: left;">
                Attempts
            </th>
            <th title="Result" style="width: 200px; text-align: left;">
                Result
            </th>
            @if (!Model.GameFinalized)
            {
                <th>
                </th>
            }
        </tr>
        @foreach (var score in Model.Game.Shots.OrderBy(s => s.Id))
        {
            <tr>
                <td>@score.Hole.Id
                </td>
                <td>@score.Player.Name
                </td>
                <td>@score.Attempts
                </td>
                <td>@score.ShotType.Name
                </td>
                @if (!Model.GameFinalized)
                {
                    <td>
                        @if (HttpContext.Current.User.Identity.IsAuthenticated)
                        {
                            if (score.Id == lastShot && !Model.GameFinalized)
                            {
                                using (Html.BeginForm("Delete", "Score", FormMethod.Post, new { @style = "margin: 0;" }))
                                { 
                            @Html.Hidden("scoreId", score.Id)
                            @Html.Hidden("gameId", score.Game.Id)
                            <input type="submit" class="btn danger" value="Delete" />
                                }
                            }
                        }
                    </td>
                }
            </tr>
        }
    </table>
}
else
{ 
    <p>
        Game has not started.</p> 
}
@section javascript
{
    <script type="text/javascript">
        var par = 0;
        var lastAttempt = 0;
        @{
            var currentHole = Model.GetCurrentHole();
        @:par = @Model.Holes.FirstOrDefault(h => h.Id == currentHole).Par;
        if (Model.Game.Shots.Any())
        {
            var lastShotAttempt = Model.Game.Shots.LastOrDefault(s => s.Hole.Id == currentHole);
            if (lastShotAttempt != null)
            {
        @:lastAttempt = @lastShotAttempt.Attempts;
        }
        }
        }

        $(function () {
            if(lastAttempt === 1 || par === 1) {
                $("#attempts").val(1);
            }

            $("#attempts").focus();

            $("#attempts").keydown(function (e) {
                var key = e.charCode || e.keyCode || 0;

                if (key == 8 || key == 9 || key == 46 || (key >= 37 && key <= 40) || (key >= 48 && key <= 57) || (key >= 96 && key <= 105)) {
                    // Ignore
                } else {
                    if (key != 13) {
                        if (key < 95) {
                            if (key < 48 || key > 57) {
                                event.preventDefault();
                            }
                        } else {
                            if (key < 96 || key > 105) {
                                event.preventDefault();
                            }
                        }
                    }
                }
            });

            $("#attempts").keyup(function() {
                //validateAttempts();
            });
            
            $("body").keydown(function (event) {
                switch (event.keyCode) {
                    case 77:
                        if ($("#shotMade").attr("checked")) {
                            $("#shotMade").removeAttr("checked");
                        } else {
                            $("#shotMade").attr("checked", "checked");
                        }
                        break;
                }
            });
        });

        function validateAttempts() {
            if (par > 0) {
                var currentValue = parseInt($("#attempts").val());
            
                if (isNaN(currentValue)) {
                    $("#attempts").val("");
                } else if (currentValue > par) {
                    $("#attempts").val(par);
                } else {
                    $("#attempts").val(currentValue);
                }
            }
        }
    </script>
}